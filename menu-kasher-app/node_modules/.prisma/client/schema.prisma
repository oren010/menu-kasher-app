generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String

  // AUTHENTIFICATION - NOUVEAU
  passwordHash           String? // Hash du mot de passe (bcrypt)
  emailVerified          Boolean   @default(false) // Email vérifié
  emailVerificationToken String? // Token de vérification email
  resetToken             String? // Token de réinitialisation mot de passe
  resetTokenExpiry       DateTime? // Expiration du token de reset

  // SÉCURITÉ COMPTE - NOUVEAU
  isActive      Boolean   @default(true) // Compte actif
  loginAttempts Int       @default(0) // Tentatives de connexion échouées
  lockedUntil   DateTime? // Verrouillage du compte jusqu'à
  lastLogin     DateTime? // Dernière connexion
  lastLoginIp   String? // IP de dernière connexion

  // Composition familiale
  adultsCount   Int @default(2)
  childrenCount Int @default(2)

  // Préférences alimentaires étendues
  dietaryRestrictions String[] @default([]) // kosher, halal, vegan, vegetarian, pescatarian, etc.
  kosherLevel         String   @default("none") // none, basic, moderate, strict
  allergens           String[] @default([]) // nuts, dairy, gluten, eggs, etc.
  excludedIngredients String[] @default([]) // tofu, mushrooms, etc.

  // Préférences de repas
  includeLunch      Boolean @default(true)
  includeDinner     Boolean @default(true)
  includeAdultMeals Boolean @default(true)
  includeChildMeals Boolean @default(true)

  // Niveau de cuisine
  cookingSkillLevel   String @default("intermediate") // beginner, intermediate, advanced
  preferredDifficulty String @default("medium") // easy, medium, hard, mixed

  // Objectifs santé/régime
  dietGoal           String? // weight_loss, weight_gain, muscle_gain, maintain, none
  currentWeight      Float? // en kg
  targetWeight       Float? // en kg
  dailyCalorieTarget Int? // calories par jour

  // Préférences de planning
  weeklyRefinedMeals Int    @default(2) // nombre de repas raffinés par semaine
  budgetLevel        String @default("medium") // low, medium, high

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menus                Menu[]
  shoppingLists        ShoppingList[]
  recipeRatings        RecipeRating[]
  userPreferences      UserMealPreferences[]
  availableIngredients AvailableIngredient[]
  sessions             Session[] // NOUVEAU - Sessions utilisateur
  auditLogs            AuditLog[] // NOUVEAU - Actions de l'utilisateur dans les logs
  notifications        Notification[] // NOUVEAU - Notifications utilisateur

  @@map("users")
}

model UserMealPreferences {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  dayOfWeek String // monday, tuesday, ..., special_occasions
  mealType  String // lunch, dinner
  audience  String // adults, children, both

  preferredDifficulty String   @default("medium") // easy, medium, hard
  preferredTags       String[] @default([]) // quick, make_ahead, comfort_food, etc.

  @@unique([userId, dayOfWeek, mealType, audience])
  @@map("user_meal_preferences")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  displayName String
  orderIndex  Int     @default(0)
  icon        String? // icon class or emoji
  color       String? // hex color for UI

  ingredients Ingredient[]

  @@map("categories")
}

model Ingredient {
  id         String   @id @default(cuid())
  name       String   @unique
  unit       String   @default("g") // g, ml, piece, bunch, cup, tbsp, tsp
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // Propriétés nutritionnelles
  caloriesPer100g Float? // calories pour 100g/100ml
  proteinPer100g  Float? // protéines en g
  carbsPer100g    Float? // glucides en g
  fatPer100g      Float? // lipides en g

  // Restrictions alimentaires
  dietaryTags String[] @default([]) // kosher, halal, vegan, vegetarian, gluten_free, dairy_free, etc.
  allergens   String[] @default([]) // nuts, dairy, gluten, eggs, soy, etc.

  // Disponibilité et coût
  seasonality String[] @default([]) // spring, summer, autumn, winter, year_round
  averageCost String   @default("medium") // low, medium, high
  shelfLife   Int? // durée de conservation en jours

  recipeIngredients    RecipeIngredient[]
  shoppingListItems    ShoppingListItem[]
  availableIngredients AvailableIngredient[]

  @@map("ingredients")
}

model Recipe {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String? // URL de l'image de la recette

  // Portions et temps
  servings  Int  @default(4)
  prepTime  Int? // minutes de préparation
  cookTime  Int? // minutes de cuisson
  totalTime Int? // temps total (calculé ou manuel)

  // Classification
  difficulty String  @default("medium") // easy, medium, hard
  mealType   String // breakfast, lunch, dinner, snack, dessert
  audience   String  @default("both") // adults, children, both
  cuisine    String? // french, italian, asian, middle_eastern, etc.

  // Propriétés nutritionnelles
  caloriesPerServing Float?
  proteinPerServing  Float?
  carbsPerServing    Float?
  fatPerServing      Float?

  // Restrictions et tags
  dietaryTags  String[] @default([]) // kosher, halal, vegan, vegetarian, etc.
  mealTags     String[] @default([]) // quick, make_ahead, one_pot, comfort_food, etc.
  occasionTags String[] @default([]) // shabbat, yom_tov, weeknight, entertaining, etc.
  allergens    String[] @default([]) // contains allergens

  // Instructions et équipement
  instructions   String[] @default([])
  tips           String[] @default([])
  equipment      String[] @default([]) // oven, stovetop, mixer, food_processor, etc.
  suggestedDrink String?
  suggestedSides String[] @default([])

  // Métadonnées utilisateur
  personalNotes String?
  isTested      Boolean   @default(false)
  isBookmarked  Boolean   @default(false)
  lastMade      DateTime?
  timesCooked   Int       @default(0)

  // Planification
  canMakeAhead Boolean @default(false)
  freezable    Boolean @default(false)
  leftoverDays Int? // combien de jours les restes se conservent

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredients RecipeIngredient[]
  meals       Meal[]
  ratings     RecipeRating[]

  @@map("recipes")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Float
  unit         String? // Override ingredient default unit if needed
  notes        String? // "finely chopped", "room temperature", etc.
  isOptional   Boolean    @default(false)
  section      String? // "for marinade", "for garnish", etc.

  @@unique([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model RecipeRating {
  id       String @id @default(cuid())
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  rating         Int // 1-5 stars
  comment        String?
  difficulty     Int? // 1-5, user's perceived difficulty
  wouldMakeAgain Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recipeId, userId])
  @@map("recipe_ratings")
}

model Menu {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isActive  Boolean  @default(false)

  // Configuration du menu
  includeLunch      Boolean @default(true)
  includeDinner     Boolean @default(true)
  includeAdultMeals Boolean @default(true)
  includeChildMeals Boolean @default(true)

  // Contraintes de génération
  maxDifficulty String @default("medium") // easy, medium, hard
  budgetLevel   String @default("medium") // low, medium, high
  varietyLevel  String @default("high") // low, medium, high

  // Jours spéciaux
  specialDays Json[] @default([]) // [{date: "2025-07-25", type: "shabbat", rules: {...}}]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meals         Meal[]
  shoppingLists ShoppingList[]

  @@map("menus")
}

model Meal {
  id       String   @id @default(cuid())
  menu     Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId   String
  date     DateTime
  mealType String // breakfast, lunch, dinner, snack
  audience String // adults, children, both
  recipe   Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId String?

  // Statut et notes
  isPlanned        Boolean @default(true)
  isCooked         Boolean @default(false)
  rating           Int? // 1-5 satisfaction rating après avoir cuisiné
  notes            String?
  leftoverPortions Int     @default(0)

  // Adaptations
  servingsActual Int? // nombre de portions réellement préparées
  difficulty     String? // difficulté réelle ressentie
  timeActual     Int? // temps réel de préparation

  @@unique([menuId, date, mealType, audience])
  @@map("meals")
}

model ShoppingList {
  id     String @id @default(cuid())
  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  name   String

  // Configuration
  excludeAvailable Boolean @default(false) // exclure les ingrédients disponibles
  groupByCategory  Boolean @default(true) // grouper par catégorie
  showRecipeLinks  Boolean @default(true) // afficher les recettes liées

  // Estimation budget
  estimatedCost Float?
  budgetAlert   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items ShoppingListItem[]

  @@map("shopping_lists")
}

model ShoppingListItem {
  id             String       @id @default(cuid())
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String
  ingredient     Ingredient   @relation(fields: [ingredientId], references: [id])
  ingredientId   String
  quantity       Float
  unit           String

  // Statut d'achat
  isPurchased    Boolean @default(false)
  actualCost     Float? // coût réel payé
  actualQuantity Float? // quantité réellement achetée
  store          String? // magasin où acheté

  // Liens vers recettes
  recipeNames String[] @default([]) // noms des recettes qui utilisent cet ingrédient
  isOptional  Boolean  @default(false)
  priority    String   @default("normal") // high, normal, low

  notes String?

  @@unique([shoppingListId, ingredientId])
  @@map("shopping_list_items")
}

model AvailableIngredient {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Float
  unit         String
  expiryDate   DateTime?
  location     String? // "frigo", "congélateur", "placard"
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, ingredientId])
  @@map("available_ingredients")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general") // general, dietary, ui, notifications
  isPublic    Boolean  @default(true) // visible par tous les utilisateurs
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

// Nouvelles tables pour fonctionnalités avancées

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  isTemplate  Boolean  @default(false) // template réutilisable ou plan spécifique
  tags        String[] @default([]) // quick_meals, family_friendly, budget, etc.

  // Configuration cible
  targetCalories   Int?
  targetBudget     Float?
  difficultyLevel  String @default("medium")
  preparationStyle String @default("mixed") // batch_cooking, daily_fresh, mixed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meals PlanMeal[]

  @@map("meal_plans")
}

model PlanMeal {
  id         String   @id @default(cuid())
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId String

  dayOffset Int // jour relatif (0 = premier jour, 1 = deuxième jour, etc.)
  mealType  String // breakfast, lunch, dinner, snack
  audience  String // adults, children, both

  // Contraintes de ce repas spécifique
  maxCalories  Int?
  maxPrepTime  Int?
  requiredTags String[] @default([])
  excludedTags String[] @default([])

  @@unique([mealPlanId, dayOffset, mealType, audience])
  @@map("plan_meals")
}

// =============================================
// NOUVELLES TABLES POUR ADMINISTRATION ET AUTH
// =============================================

model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String // Hash bcrypt du mot de passe
  name         String
  role         String   @default("content_admin") // super_admin, content_admin, user_admin, analytics_admin
  permissions  String[] @default([]) // Permissions granulaires

  // Statut et sécurité
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  lastLoginIp   String?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String? // ID de l'admin qui a créé ce compte

  sessions      Session[] // Sessions admin
  auditLogs     AuditLog[] // Actions effectuées par cet admin
  notifications Notification[] // Notifications admin

  @@map("admins")
}

model Session {
  id    String @id @default(cuid())
  token String @unique // JWT token ou session ID

  // Relations (soit user soit admin)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String?
  admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId String?

  // Métadonnées de session
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  isActive  Boolean  @default(true)

  // Sécurité
  lastActivity DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model AuditLog {
  id String @id @default(cuid())

  // Qui a fait l'action
  admin   Admin?  @relation(fields: [adminId], references: [id])
  adminId String?
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?

  // Quoi
  action    String // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  tableName String // nom de la table affectée
  recordId  String? // ID de l'enregistrement affecté

  // Données
  oldData Json? // Données avant modification
  newData Json? // Données après modification

  // Contexte
  ipAddress  String?
  userAgent  String?
  endpoint   String? // API endpoint appelé
  httpMethod String? // GET, POST, PUT, DELETE

  // Résultat
  success      Boolean @default(true)
  errorMessage String? // Si échec

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique // users.create, recipes.read, etc.
  resource    String // users, recipes, ingredients, analytics, logs, system
  action      String // create, read, update, delete, view
  description String?

  createdAt DateTime @default(now())

  @@map("permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // super_admin, content_admin, etc.
  displayName String // "Super Administrateur", "Gestionnaire de Contenu"
  description String?
  permissions String[] @default([]) // Liste des permissions
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Notification {
  id String @id @default(cuid())

  // Destinataire
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String?
  admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId String?

  // Contenu
  title    String
  message  String
  type     String @default("info") // info, success, warning, danger
  category String @default("general") // general, menu, recipe, user, system

  // Métadonnées
  data Json? // Données additionnelles pour actions spécifiques
  url  String? // URL de redirection si applicable

  // État
  isRead Boolean   @default(false)
  readAt DateTime?

  // Expiration (optionnel)
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}
