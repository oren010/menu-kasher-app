
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  isActive: 'isActive',
  loginAttempts: 'loginAttempts',
  lockedUntil: 'lockedUntil',
  lastLogin: 'lastLogin',
  lastLoginIp: 'lastLoginIp',
  adultsCount: 'adultsCount',
  childrenCount: 'childrenCount',
  dietaryRestrictions: 'dietaryRestrictions',
  kosherLevel: 'kosherLevel',
  allergens: 'allergens',
  excludedIngredients: 'excludedIngredients',
  includeLunch: 'includeLunch',
  includeDinner: 'includeDinner',
  includeAdultMeals: 'includeAdultMeals',
  includeChildMeals: 'includeChildMeals',
  cookingSkillLevel: 'cookingSkillLevel',
  preferredDifficulty: 'preferredDifficulty',
  dietGoal: 'dietGoal',
  currentWeight: 'currentWeight',
  targetWeight: 'targetWeight',
  dailyCalorieTarget: 'dailyCalorieTarget',
  weeklyRefinedMeals: 'weeklyRefinedMeals',
  budgetLevel: 'budgetLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserMealPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dayOfWeek: 'dayOfWeek',
  mealType: 'mealType',
  audience: 'audience',
  preferredDifficulty: 'preferredDifficulty',
  preferredTags: 'preferredTags'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  orderIndex: 'orderIndex',
  icon: 'icon',
  color: 'color'
};

exports.Prisma.IngredientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unit: 'unit',
  categoryId: 'categoryId',
  caloriesPer100g: 'caloriesPer100g',
  proteinPer100g: 'proteinPer100g',
  carbsPer100g: 'carbsPer100g',
  fatPer100g: 'fatPer100g',
  dietaryTags: 'dietaryTags',
  allergens: 'allergens',
  seasonality: 'seasonality',
  averageCost: 'averageCost',
  shelfLife: 'shelfLife'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  servings: 'servings',
  prepTime: 'prepTime',
  cookTime: 'cookTime',
  totalTime: 'totalTime',
  difficulty: 'difficulty',
  mealType: 'mealType',
  audience: 'audience',
  cuisine: 'cuisine',
  caloriesPerServing: 'caloriesPerServing',
  proteinPerServing: 'proteinPerServing',
  carbsPerServing: 'carbsPerServing',
  fatPerServing: 'fatPerServing',
  dietaryTags: 'dietaryTags',
  mealTags: 'mealTags',
  occasionTags: 'occasionTags',
  allergens: 'allergens',
  instructions: 'instructions',
  tips: 'tips',
  equipment: 'equipment',
  suggestedDrink: 'suggestedDrink',
  suggestedSides: 'suggestedSides',
  personalNotes: 'personalNotes',
  isTested: 'isTested',
  isBookmarked: 'isBookmarked',
  lastMade: 'lastMade',
  timesCooked: 'timesCooked',
  canMakeAhead: 'canMakeAhead',
  freezable: 'freezable',
  leftoverDays: 'leftoverDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeIngredientScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  ingredientId: 'ingredientId',
  quantity: 'quantity',
  unit: 'unit',
  notes: 'notes',
  isOptional: 'isOptional',
  section: 'section'
};

exports.Prisma.RecipeRatingScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  difficulty: 'difficulty',
  wouldMakeAgain: 'wouldMakeAgain',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  userId: 'userId',
  isActive: 'isActive',
  includeLunch: 'includeLunch',
  includeDinner: 'includeDinner',
  includeAdultMeals: 'includeAdultMeals',
  includeChildMeals: 'includeChildMeals',
  maxDifficulty: 'maxDifficulty',
  budgetLevel: 'budgetLevel',
  varietyLevel: 'varietyLevel',
  specialDays: 'specialDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealScalarFieldEnum = {
  id: 'id',
  menuId: 'menuId',
  date: 'date',
  mealType: 'mealType',
  audience: 'audience',
  recipeId: 'recipeId',
  isPlanned: 'isPlanned',
  isCooked: 'isCooked',
  rating: 'rating',
  notes: 'notes',
  leftoverPortions: 'leftoverPortions',
  servingsActual: 'servingsActual',
  difficulty: 'difficulty',
  timeActual: 'timeActual'
};

exports.Prisma.ShoppingListScalarFieldEnum = {
  id: 'id',
  menuId: 'menuId',
  userId: 'userId',
  name: 'name',
  excludeAvailable: 'excludeAvailable',
  groupByCategory: 'groupByCategory',
  showRecipeLinks: 'showRecipeLinks',
  estimatedCost: 'estimatedCost',
  budgetAlert: 'budgetAlert',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingListItemScalarFieldEnum = {
  id: 'id',
  shoppingListId: 'shoppingListId',
  ingredientId: 'ingredientId',
  quantity: 'quantity',
  unit: 'unit',
  isPurchased: 'isPurchased',
  actualCost: 'actualCost',
  actualQuantity: 'actualQuantity',
  store: 'store',
  recipeNames: 'recipeNames',
  isOptional: 'isOptional',
  priority: 'priority',
  notes: 'notes'
};

exports.Prisma.AvailableIngredientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ingredientId: 'ingredientId',
  quantity: 'quantity',
  unit: 'unit',
  expiryDate: 'expiryDate',
  location: 'location',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  isPublic: 'isPublic',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isTemplate: 'isTemplate',
  tags: 'tags',
  targetCalories: 'targetCalories',
  targetBudget: 'targetBudget',
  difficultyLevel: 'difficultyLevel',
  preparationStyle: 'preparationStyle',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanMealScalarFieldEnum = {
  id: 'id',
  mealPlanId: 'mealPlanId',
  dayOffset: 'dayOffset',
  mealType: 'mealType',
  audience: 'audience',
  maxCalories: 'maxCalories',
  maxPrepTime: 'maxPrepTime',
  requiredTags: 'requiredTags',
  excludedTags: 'excludedTags'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  lastLoginIp: 'lastLoginIp',
  loginAttempts: 'loginAttempts',
  lockedUntil: 'lockedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  adminId: 'adminId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  userId: 'userId',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldData: 'oldData',
  newData: 'newData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  endpoint: 'endpoint',
  httpMethod: 'httpMethod',
  success: 'success',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  resource: 'resource',
  action: 'action',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  permissions: 'permissions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminId: 'adminId',
  title: 'title',
  message: 'message',
  type: 'type',
  category: 'category',
  data: 'data',
  url: 'url',
  isRead: 'isRead',
  readAt: 'readAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  UserMealPreferences: 'UserMealPreferences',
  Category: 'Category',
  Ingredient: 'Ingredient',
  Recipe: 'Recipe',
  RecipeIngredient: 'RecipeIngredient',
  RecipeRating: 'RecipeRating',
  Menu: 'Menu',
  Meal: 'Meal',
  ShoppingList: 'ShoppingList',
  ShoppingListItem: 'ShoppingListItem',
  AvailableIngredient: 'AvailableIngredient',
  Settings: 'Settings',
  MealPlan: 'MealPlan',
  PlanMeal: 'PlanMeal',
  Admin: 'Admin',
  Session: 'Session',
  AuditLog: 'AuditLog',
  Permission: 'Permission',
  Role: 'Role',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
